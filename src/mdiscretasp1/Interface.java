/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mdiscretasp1;

import java.util.Arrays;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;


/**
 *
 * @author Santi Mercado
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    int posx = 0;
    int posy =0;
    int vertices;
    int[][] mi;
    int[][] m_adyacencia;
    int[][] m_diagonal;
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        instrucciones = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        out = new javax.swing.JComboBox<>();
        m = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        prompt = new javax.swing.JLabel();
        n = new javax.swing.JTextField();
        dato = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        prompt2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        titulo.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        titulo.setText("Punto #1");

        instrucciones.setFont(new java.awt.Font("SansSerif", 2, 18)); // NOI18N
        instrucciones.setText("- Hallar la matriz diagonal y de adyacencia dada la matriz de incidencia de un grafo no dirigido.");

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setText("Por favor ingrese el número de vértices, aristas y el resultado que desee obtener.");

        out.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Matriz de adyacencia", "Matriz diagonal" }));

        m.setText("Ingrese el # de aristas");
        m.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        m.setMinimumSize(new java.awt.Dimension(50, 22));

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        prompt.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        prompt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        n.setText("Ingrese el # de vértices");
        n.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        n.setMinimumSize(new java.awt.Dimension(50, 22));

        dato.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dato.setMinimumSize(new java.awt.Dimension(50, 22));

        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        prompt2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        prompt2.setForeground(new java.awt.Color(255, 51, 51));
        prompt2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        output.setEditable(false);
        output.setBackground(new java.awt.Color(204, 204, 255));
        output.setBorder(null);
        output.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jScrollPane2.setViewportView(output);

        reset.setText("Reiniciar");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instrucciones)
                        .addGap(43, 43, 43)
                        .addComponent(reset)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(prompt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(32, 32, 32)
                                .addComponent(n, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(dato, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(0, 29, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(titulo)
                        .addGap(499, 499, 499))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prompt2, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instrucciones)
                    .addComponent(reset))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(n, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prompt, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(dato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prompt2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        prompt.setText(null);
        prompt2.setText(null);
        if (n.getText().isEmpty()){
            if(m.getText().isEmpty()){
              prompt2.setText("Por favor ingrese un número de vértices y aristas para poder continuar");  
            } else {
              prompt2.setText("Por favor ingrese un número de vértices para poder continuar");  
            }   
        } else {
            if (m.getText().isEmpty()){
                prompt2.setText("Por favor ingrese un número de aristas para poder continuar");
            }
            if (n.getText().chars().allMatch(Character :: isDigit) == true){
                vertices = Integer.parseInt(n.getText());
                if (vertices ==0){
                    prompt2.setText("No puede haber 0 vértices en un grafo");
                } else {
                if (m.getText().chars().allMatch(Character :: isDigit) == false){
                   prompt2.setText("Por favor ingrese un número de aristas válido para poder continuar");  
                } else {
                 int aristas = Integer.parseInt(m.getText()); 
                 if (aristas == 0){
                     NoAristas();
                 } else {
                     dato.setVisible(true);
                 n.setEditable(false);
                 m.setEditable(false);
                 out.setEditable(false);
                 out.setEnabled(false);
                 jButton1.setVisible(false);
                 jButton2.setVisible(true);
                   this.mi = new int[vertices][aristas];
                   LlenarMatrizI(vertices, aristas, false, mi);
                 }               
                }
                
            }
            } else {
                if (m.getText().chars().allMatch(Character :: isDigit) == false){
                   prompt2.setText("Por favor ingrese un número de vértices y aristas válido para poder continuar"); 
                } else {
                    prompt2.setText("Por favor ingrese un número de vértices válido para poder continuar");
                }
                
            }
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
prompt2.setText("");
        if (dato.getText().isEmpty() == true){
    prompt2.setText("Por favor ingrese un valor");
} else {
    if (dato.getText().chars().allMatch(Character :: isDigit) == false){
      prompt2.setText("Por favor ingrese un valor válido");
    } else {
        int num = Integer.parseInt(dato.getText());
        if (num != 0 && num != 1 && num != 2){
           prompt2.setText("Por favor ingrese un valor válido");
        } else {
           LlenarMatrizI(vertices, Integer.parseInt(m.getText()), true, mi);  
        }
        
    }
}        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        Init();
    }//GEN-LAST:event_resetActionPerformed

    /**
     * @param args the command line arguments
     */
    public void Init(){
       dato.setVisible(false); 
                 n.setEditable(true);
                 m.setEditable(true);
                 out.setEnabled(true);
                 jButton1.setVisible(true);
                 jButton2.setVisible(false);
                 prompt.setText(null);
                 prompt.setVisible(false);
                 output.setText(null);
                 prompt2.setVisible(true);
                 prompt2.setText(null);
                SimpleAttributeSet attribs = new SimpleAttributeSet();
                StyleConstants.setAlignment(attribs, StyleConstants.ALIGN_CENTER);
                StyleConstants.setBold(attribs, true);
                StyleConstants.setFontSize(attribs, 24);
                StyleConstants.setFontFamily(attribs, "SansSerif");
                output.setParagraphAttributes(attribs, true);
                reset.setVisible(false);
                posx = 0;
                posy = 0;
                
    }
    
    public void NoAristas(){
        m_adyacencia = new int[vertices][vertices]; 
        m_diagonal = new int[vertices][vertices]; 
       for (int i =0; i<m_adyacencia.length; i++){
         for (int j=0; j<m_adyacencia.length; j++){
           m_adyacencia[i][j] = 0;
           m_diagonal[i][j] = 0;
         }  
       } 
       if (out.getSelectedIndex() == 0){
         prompt.setText("La matriz de adyacencia queda de la siguiente forma:");
         ImprimirM(m_adyacencia);
       } else {
         prompt.setText("La matriz diagonal queda de la siguiente forma:");
         ImprimirM(m_diagonal);
       }
    }
  
    
    public void LlenarMatrizA(){
       m_adyacencia = new int[vertices][vertices]; 
       boolean correctmatrix = true;
       for (int i =0; i<m_adyacencia.length; i++){
         for (int j=0; j<m_adyacencia.length; j++){
           m_adyacencia[i][j] = 0;
         }  
       }
       int cont = 0;
       int temp = -1;
       for (int j = 0; j<Integer.parseInt(m.getText()); j++){
           cont = 0;
           temp = -1;
           for (int i =0; i<vertices; i++){
               cont = cont + mi[i][j];
               if (mi[i][j] == 1){
                   if (temp == -1){
                      temp = i; 
                   } else {
                       m_adyacencia[temp][i] = m_adyacencia[temp][i] + 1;
                       m_adyacencia[i][temp] = m_adyacencia[i][temp] + 1;
                   }
               }
               if (mi[i][j] == 2){
                   m_adyacencia[i][i] = m_adyacencia[i][i] + 1;
               }
               if (mi[i][j] == 1 && vertices == 1){
                  correctmatrix = false; 
               }
           }
           if (cont != 2){
               correctmatrix = false;
           }
       }
       if(correctmatrix == false){
           prompt2.setVisible(true);
           prompt2.setText("La matriz de incidencia ingresada no es válida, vuelva a intentarlo porfavor");
           mi = new int[vertices][Integer.parseInt(m.getText())];
           posx = 0;
           posy = 0;
           Init();
           prompt2.setVisible(true);
           prompt2.setText("La matriz de incidencia ingresada no es válida, vuelva a intentarlo porfavor");
       } else {
           if (out.getSelectedIndex()==0){
             ImprimirM(m_adyacencia); 
           } else {
             LlenarMatrizD();  
           }
          
       }
        
    }
    
    public void ImprimirM(int[][] matrix){
        output.setVisible(true);
        int cont = 1;
        String skip = "";
        output.setText(output.getText()+"   |");
        for (int i=0; i<matrix.length; i++){
            skip=skip.concat("- - - - - - - ");
          output.setText(output.getText() + "  ["+cont+"]   |");
          cont++;
        }
        output.setText(output.getText()+"\n"+skip+"\n");
        cont = 1;
        for (int i=0; i<matrix.length; i++){
            output.setText(output.getText()+"[" +cont+"]  |   ");
            for (int j=0; j<matrix.length; j++){
                output.setText(output.getText()+matrix[i][j]+"    |   ");
            }
            output.setText(output.getText()+"\n"+skip+"\n");
            cont++;
        }
        reset.setVisible(true);
    }
    
    public void LlenarMatrizD(){
        m_diagonal = new int[vertices][vertices];
        for (int i =0; i<m_diagonal.length; i++){
         for (int j=0; j<m_diagonal.length; j++){
           m_diagonal[i][j] = 0;
         }  
       }
        int suma =0;
        for (int i=0; i<m_adyacencia.length; i++){
            suma = 0;
            for (int j=0; j<m_adyacencia.length; j++){
                suma=suma+m_adyacencia[i][j];
            }
            m_diagonal[i][i] = suma;
        }
        ImprimirM(m_diagonal);
    }
    
    public void LlenarMatrizI(int tamx, int tamy, boolean agg, int[][] matrix){
        prompt.setVisible(true);
       prompt.setText("Por favor ingrese el valor de la posición ["+posx+", "+posy+ "] de la matriz de incidencia"); 
       if (agg == true){
           matrix[posx][posy] = Integer.parseInt(dato.getText());
           dato.setText("");
           if (posy+1 > tamy-1){
               if(posx+1 > tamx-1){ 
                   LlenarMatrizA();
                   if (out.getSelectedIndex() == 0){
                      prompt.setText("Matriz de incidencia completa. La matriz de adyacencia queda de la siguiente forma:"); 
                      dato.setVisible(false);
                       dato.setText("");
                       jButton2.setVisible(false);
                   } else {
                       prompt.setText("Matriz de incidencia completa. La matriz diagonal queda de la siguiente forma:"); 
                       dato.setVisible(false);
                       dato.setText("");
                       jButton2.setVisible(false);
                   }
                   
               } else {
                   posx = posx +1;
                   posy = 0;
                   prompt.setText("Por favor ingrese el valor de la posición ["+posx+", "+posy+ "] de la matriz de incidencia"); 
               }
           } else {
               posy = posy+1;
               prompt.setText("Por favor ingrese el valor de la posición ["+posx+", "+posy+ "] de la matriz de incidencia"); 
           }
       }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dato;
    private javax.swing.JLabel instrucciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField m;
    private javax.swing.JTextField n;
    private javax.swing.JComboBox<String> out;
    private javax.swing.JTextPane output;
    private javax.swing.JLabel prompt;
    private javax.swing.JLabel prompt2;
    private javax.swing.JButton reset;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
